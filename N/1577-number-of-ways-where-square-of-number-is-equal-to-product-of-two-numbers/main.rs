struct Solution {}

use std::collections::HashMap;
impl Solution {
  pub fn num_triplets(nums1: Vec<i32>, nums2: Vec<i32>) -> i32 {
    let mut m1: HashMap<i32, i32> = HashMap::new();
    let mut m2: HashMap<i32, i32> = HashMap::new();
    for i in &nums1 {
      let c = m1.entry(*i).or_insert(0);
      *c += 1;
    }
    for i in &nums2 {
      let c = m2.entry(*i).or_insert(0);
      *c += 1;
    }
    let mut sum = 0;
    for (k1, v1) in m1.iter() {
      let v: u64 = (*k1 as u64) * (*k1 as u64);
      for (k2, v2) in m2.iter() {
        if v % (*k2 as u64) != 0 {
          continue;
        }
        let c1 = *k2;
        let c2 = (v / (*k2 as u64)) as i32;
        if c1 == c2 && m2.contains_key(&c1) {
          let cnt = m2.get(&c1).unwrap();
          if *cnt > 1 {
            sum += *v1 * (*cnt) * (*cnt - 1) / 2;
          }
        } else if c1 < c2 && m2.contains_key(&c1) && m2.contains_key(&c2) {
          let cnt1 = m2.get(&c1).unwrap();
          let cnt2 = m2.get(&c2).unwrap();
          sum += *v1 * cnt1 * cnt2;
        }
      }
    }
    // println!("{}", sum);
    for (k2, v2) in m2.iter() {
      let v: u64 = (*k2 as u64) * (*k2 as u64);
      for (k1, v1) in m1.iter() {
        if v % (*k1 as u64) != 0 {
          continue;
        }
        let c1 = *k1;
        let c2 = (v / (*k1 as u64)) as i32;
        if c1 == c2 && m1.contains_key(&c1) {
          let cnt = m1.get(&c1).unwrap();
          if *cnt > 1 {
            sum += *v2 * (*cnt) * (*cnt - 1) / 2;
          }
        } else if c1 < c2 && m1.contains_key(&c1) && m1.contains_key(&c2) {
          let cnt1 = m1.get(&c1).unwrap();
          let cnt2 = m1.get(&c2).unwrap();
          sum += *v2 * cnt1 * cnt2;
        }
      }
    }
    sum
  }
}

fn main() {
  println!(
    "{}",
    Solution::num_triplets(
      vec![
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000
      ],
      vec![
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000, 100000,
        100000, 100000, 100000, 100000, 100000, 100000, 100000
      ]
    )
  );
}
