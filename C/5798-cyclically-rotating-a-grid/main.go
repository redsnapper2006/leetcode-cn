package main

import "fmt"

func rotateGrid(grid [][]int, k int) [][]int {
	buf := make([][]int, len(grid))
	for i := 0; i < len(grid); i++ {
		buf[i] = make([]int, len(grid[0]))
	}
	times := len(grid[0]) / 2
	if times > len(grid)/2 {
		times = len(grid) / 2
	}

	for i := 0; i < times; i++ {
		temp := []int{}
		for ii := i; ii < len(grid[0])-i; ii++ {
			temp = append(temp, grid[i][ii])
		}
		for ii := i + 1; ii < len(grid)-i; ii++ {
			temp = append(temp, grid[ii][len(grid[0])-1-i])
		}
		for ii := len(grid[0]) - 1 - i - 1; ii >= i; ii-- {
			temp = append(temp, grid[len(grid)-1-i][ii])
		}
		for ii := len(grid) - 1 - i - 1; ii > i; ii-- {
			temp = append(temp, grid[ii][i])
		}
		offset := k % len(temp)
		for ii := i; ii < len(grid[0])-i; ii++ {
			buf[i][ii] = temp[offset]
			offset++
			offset %= len(temp)
		}
		for ii := i + 1; ii < len(grid)-i; ii++ {
			buf[ii][len(grid[0])-1-i] = temp[offset]
			offset++
			offset %= len(temp)
		}
		for ii := len(grid[0]) - 1 - i - 1; ii >= i; ii-- {
			buf[len(grid)-1-i][ii] = temp[offset]
			offset++
			offset %= len(temp)
		}
		for ii := len(grid) - 1 - i - 1; ii > i; ii-- {
			buf[ii][i] = temp[offset]
			offset++
			offset %= len(temp)
		}
	}
	return buf
}

func main() {
	fmt.Println(rotateGrid([][]int{
		{2190, 43, 3543, 1196, 875, 4722, 4841, 4224, 475, 42, 4349, 4166, 814, 3318, 4764, 2731, 1022, 4213, 150, 4391, 582, 2454, 447, 3157},
		{2736, 4404, 3175, 3807, 1534, 3725, 2417, 3360, 1749, 3092, 165, 34, 911, 3827, 333, 2026, 4002, 115, 4389, 3548, 1566, 3985, 1383, 591},
		{1343, 309, 2997, 2659, 3121, 762, 309, 4475, 3139, 3126, 3678, 1947, 4207, 2151, 4008, 2811, 3337, 2367, 2050, 425, 2462, 1103, 4475, 1447},
		{57, 296, 3206, 3633, 876, 2715, 3943, 871, 4430, 3789, 2488, 3156, 1313, 3758, 993, 2642, 2356, 1373, 2548, 571, 1538, 2368, 3509, 850},
		{2951, 3293, 2349, 3811, 4280, 2703, 1519, 3670, 4116, 2361, 1852, 3331, 2183, 4571, 4088, 3246, 4331, 3907, 4112, 2215, 4115, 4659, 4178, 320},
		{2608, 3119, 4589, 1551, 1451, 4069, 1250, 1237, 4535, 2239, 4468, 1731, 1106, 4388, 2649, 1397, 1349, 3177, 3239, 1907, 529, 402, 126, 2722},
		{3443, 866, 3791, 4617, 2328, 4647, 1094, 3169, 2298, 4930, 3686, 2633, 790, 3756, 1898, 2264, 4792, 3918, 4080, 37, 779, 596, 536, 4376},
		{2235, 1944, 1903, 316, 2162, 1123, 2621, 750, 4183, 2306, 3104, 1810, 1198, 3107, 1447, 3305, 2649, 3206, 4562, 4115, 2520, 2387, 691, 1269},
		{3425, 2830, 374, 327, 2894, 306, 4503, 3540, 3260, 1873, 2634, 3938, 957, 3228, 4012, 421, 470, 619, 4919, 1948, 3865, 124, 2701, 736},
		{4538, 2195, 4995, 4802, 3747, 2207, 1660, 2975, 3344, 4191, 4515, 2024, 3439, 3346, 1977, 915, 66, 3838, 1931, 4046, 3764, 1190, 4511, 2151},
		{1781, 4700, 1414, 3255, 668, 645, 1728, 790, 430, 3985, 4145, 4023, 4229, 738, 3527, 1210, 658, 3291, 563, 4801, 3961, 3967, 376, 4841},
		{955, 926, 1494, 3899, 2146, 1787, 282, 623, 3343, 3851, 1811, 3011, 4776, 1063, 508, 775, 2113, 3261, 8, 4534, 403, 1257, 4367, 2529},
		{943, 2465, 3674, 1751, 349, 2910, 787, 2797, 2483, 742, 3138, 118, 3599, 1428, 968, 2228, 3388, 2764, 4475, 2893, 2248, 3610, 2526, 1468},
		{1326, 1142, 1317, 3972, 3205, 989, 1046, 3336, 4035, 1956, 433, 4345, 447, 3372, 232, 3784, 1203, 1586, 4557, 1237, 2759, 2402, 2753, 1630}},
		717433611))
}
