impl Solution {
  pub fn reordered_power_of2(n: i32) -> bool {
    let occu: Vec<Vec<i32>> = vec![
      vec![0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
      vec![0, 0, 1, 0, 0, 0, 0, 0, 0, 0],
      vec![0, 0, 0, 0, 1, 0, 0, 0, 0, 0],
      vec![0, 0, 0, 0, 0, 0, 0, 0, 1, 0],
      vec![0, 1, 0, 0, 0, 0, 1, 0, 0, 0],
      vec![0, 0, 1, 1, 0, 0, 0, 0, 0, 0],
      vec![0, 0, 0, 0, 1, 0, 1, 0, 0, 0],
      vec![0, 1, 1, 0, 0, 0, 0, 0, 1, 0],
      vec![0, 0, 1, 0, 0, 1, 1, 0, 0, 0],
      vec![0, 1, 1, 0, 0, 1, 0, 0, 0, 0],
      vec![1, 1, 1, 0, 1, 0, 0, 0, 0, 0],
      vec![1, 0, 1, 0, 1, 0, 0, 0, 1, 0],
      vec![1, 0, 0, 0, 1, 0, 1, 0, 0, 1],
      vec![0, 1, 1, 0, 0, 0, 0, 0, 1, 1],
      vec![0, 1, 0, 1, 1, 0, 1, 0, 1, 0],
      vec![0, 0, 1, 1, 0, 0, 1, 1, 1, 0],
      vec![0, 0, 0, 1, 0, 2, 2, 0, 0, 0],
      vec![1, 2, 1, 1, 0, 0, 0, 1, 0, 0],
      vec![0, 1, 2, 0, 2, 0, 1, 0, 0, 0],
      vec![0, 0, 2, 0, 1, 1, 0, 0, 2, 0],
      vec![1, 1, 0, 0, 1, 1, 1, 1, 1, 0],
      vec![1, 1, 2, 0, 0, 1, 0, 1, 0, 1],
      vec![1, 1, 0, 1, 3, 0, 0, 0, 0, 1],
      vec![1, 0, 0, 1, 0, 0, 1, 0, 4, 0],
      vec![0, 2, 1, 0, 0, 0, 2, 3, 0, 0],
      vec![0, 0, 1, 3, 2, 2, 0, 0, 0, 0],
      vec![1, 1, 0, 0, 1, 0, 2, 1, 2, 0],
      vec![0, 2, 2, 1, 1, 0, 0, 2, 1, 0],
      vec![0, 0, 1, 1, 2, 2, 2, 0, 1, 0],
      vec![1, 1, 1, 1, 0, 1, 1, 1, 1, 1],
    ];
    let mut dp: Vec<i32> = vec![0; 10];
    let mut n = n;
    while n > 0 {
      dp[(n % 10) as usize] += 1;
      n /= 10;
    }

    for i in occu.iter() {
      let mut valid: bool = true;
      for j in 0..i.len() {
        if dp[j] != i[j] {
          valid = false;
          break;
        }
      }
      if valid {
        return valid;
      }
    }
    false
  }
}
